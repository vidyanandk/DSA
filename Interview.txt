/*
1. Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Example 2:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.
*/


-4 -4 -1 -1 0 1 2
   i   j     k
 -4 +-1=-5   (a+b+c=0 )
  j=i+1; k=n-1;
  
  sum=i+j+k
  1 1 1 2 2 2 3  3+2 + 1
      i
  vector<vector<int>> tripsum(vector<int> &arr){
      int n=arr.size();
      vector<vector<int>> ans;
      
      sort(arr.begin(),arr.end());  nlogn
      for(int i=0;i<n;i++){  n
          if(i!=0 && arr[i]==arr[i-1]) continue;//dup
          int j=i+1;
          int k=n-1;
          while(j<k){                                      Tc(n2+nlogn)=n2
              int sum=arr[i]+arr[j]+arr[k];
              if(sum<0) j++;
              else if(sum>0) k--;
              else {
                  vector<int> temp={arr[i],arr[j],arr[k]};
                  ans.push_back(temp);
                  j++;k--;
                  while(j<k && arr[j]==arr[j-1]) j++;
                  while(j<k && arr[k]==arr[k+1]) k--;
              }
          }
      }
      return  ans;
  }
  
  
  

/*
2. Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

Example 1:


Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
     1,3,5,2,4
*/   

   node * fun(node * root){
         node* temp1=root;
         node* temp2=new node();
         node* temp3=temp2;
         while(temp1!=NULL){
             temp3->next=temp1->next;
             temp1->next=temp3->next;
             temp1=temp1->next;
         }
         temp1->next=temp2->next;
         return root;
   }
   
   1,3,5,2,4
      t1

